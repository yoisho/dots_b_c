<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hackathon Web API
 *
 * Hackathonの Web API 仕様書
 *
 * OpenAPI spec version: 0.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://bcd-web.net/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addObjectValueUsingPOST
     *
     * オブジェクトの登録
     *
     * @param string $object_id オブジェクトID (required)
     * @param \Swagger\Client\Model\UserObjectValue $object_value オブジェクト登録データ (required)
     * @return \Swagger\Client\Model\API_
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addObjectValueUsingPOST($object_id, $object_value)
    {
        list($response) = $this->addObjectValueUsingPOSTWithHttpInfo($object_id, $object_value);
        return $response;
    }

    /**
     * Operation addObjectValueUsingPOSTWithHttpInfo
     *
     * オブジェクトの登録
     *
     * @param string $object_id オブジェクトID (required)
     * @param \Swagger\Client\Model\UserObjectValue $object_value オブジェクト登録データ (required)
     * @return Array of \Swagger\Client\Model\API_, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addObjectValueUsingPOSTWithHttpInfo($object_id, $object_value)
    {
        // verify the required parameter 'object_id' is set
        if ($object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $object_id when calling addObjectValueUsingPOST');
        }
        // verify the required parameter 'object_value' is set
        if ($object_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $object_value when calling addObjectValueUsingPOST');
        }
        // parse inputs
        $resourcePath = "/api/v1/user/objects/{objectId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('*_/_*'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($object_id !== null) {
            $resourcePath = str_replace(
                "{" . "objectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($object_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($object_value)) {
            $_tempBody = $object_value;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API_',
                '/api/v1/user/objects/{objectId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API_', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createAssetsUsingPOST
     *
     * アセット作成
     *
     * @param \Swagger\Client\Model\AssetsDetail $assets アセット作成情報 (required)
     * @return \Swagger\Client\Model\API_
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createAssetsUsingPOST($assets)
    {
        list($response) = $this->createAssetsUsingPOSTWithHttpInfo($assets);
        return $response;
    }

    /**
     * Operation createAssetsUsingPOSTWithHttpInfo
     *
     * アセット作成
     *
     * @param \Swagger\Client\Model\AssetsDetail $assets アセット作成情報 (required)
     * @return Array of \Swagger\Client\Model\API_, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createAssetsUsingPOSTWithHttpInfo($assets)
    {
        // verify the required parameter 'assets' is set
        if ($assets === null) {
            throw new \InvalidArgumentException('Missing the required parameter $assets when calling createAssetsUsingPOST');
        }
        // parse inputs
        $resourcePath = "/api/v1/user/assets";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('*_/_*'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($assets)) {
            $_tempBody = $assets;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API_',
                '/api/v1/user/assets'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API_', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createNewAccountUsingPOST
     *
     * ユーザーの作成
     *
     * @param \Swagger\Client\Model\_ $parameter ユーザー情報 (required)
     * @return \Swagger\Client\Model\_
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createNewAccountUsingPOST($parameter)
    {
        list($response) = $this->createNewAccountUsingPOSTWithHttpInfo($parameter);
        return $response;
    }

    /**
     * Operation createNewAccountUsingPOSTWithHttpInfo
     *
     * ユーザーの作成
     *
     * @param \Swagger\Client\Model\_ $parameter ユーザー情報 (required)
     * @return Array of \Swagger\Client\Model\_, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createNewAccountUsingPOSTWithHttpInfo($parameter)
    {
        // verify the required parameter 'parameter' is set
        if ($parameter === null) {
            throw new \InvalidArgumentException('Missing the required parameter $parameter when calling createNewAccountUsingPOST');
        }
        // parse inputs
        $resourcePath = "/api/v1/user/useradd";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('*_/_*'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($parameter)) {
            $_tempBody = $parameter;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\_',
                '/api/v1/user/useradd'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\_', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createObjectUsingPOST
     *
     * オブジェクトの作成
     *
     * @param \Swagger\Client\Model\ObjectDetail $user_object オブジェクト作成情報 (required)
     * @return \Swagger\Client\Model\API_
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createObjectUsingPOST($user_object)
    {
        list($response) = $this->createObjectUsingPOSTWithHttpInfo($user_object);
        return $response;
    }

    /**
     * Operation createObjectUsingPOSTWithHttpInfo
     *
     * オブジェクトの作成
     *
     * @param \Swagger\Client\Model\ObjectDetail $user_object オブジェクト作成情報 (required)
     * @return Array of \Swagger\Client\Model\API_, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createObjectUsingPOSTWithHttpInfo($user_object)
    {
        // verify the required parameter 'user_object' is set
        if ($user_object === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_object when calling createObjectUsingPOST');
        }
        // parse inputs
        $resourcePath = "/api/v1/user/objects";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('*_/_*'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($user_object)) {
            $_tempBody = $user_object;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API_',
                '/api/v1/user/objects'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API_', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation findAssetsUsingGET
     *
     * アセット検索
     *
     * @param string $assets_name アセット名 (required)
     * @return \Swagger\Client\Model\_
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function findAssetsUsingGET($assets_name)
    {
        list($response) = $this->findAssetsUsingGETWithHttpInfo($assets_name);
        return $response;
    }

    /**
     * Operation findAssetsUsingGETWithHttpInfo
     *
     * アセット検索
     *
     * @param string $assets_name アセット名 (required)
     * @return Array of \Swagger\Client\Model\_, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function findAssetsUsingGETWithHttpInfo($assets_name)
    {
        // verify the required parameter 'assets_name' is set
        if ($assets_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $assets_name when calling findAssetsUsingGET');
        }
        // parse inputs
        $resourcePath = "/api/v1/user/assets/find";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('*_/_*'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($assets_name !== null) {
            $queryParams['assetsName'] = $this->apiClient->getSerializer()->toQueryValue($assets_name);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\_',
                '/api/v1/user/assets/find'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\_', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation findCountObjectValuesUsingGET
     *
     * オブジェクトの登録データの検索結果件数
     *
     * @param string $object_id オブジェクトID (required)
     * @param string $object_value オブジェクト検索文字列 (optional)
     * @return \Swagger\Client\Model\_
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function findCountObjectValuesUsingGET($object_id, $object_value = null)
    {
        list($response) = $this->findCountObjectValuesUsingGETWithHttpInfo($object_id, $object_value);
        return $response;
    }

    /**
     * Operation findCountObjectValuesUsingGETWithHttpInfo
     *
     * オブジェクトの登録データの検索結果件数
     *
     * @param string $object_id オブジェクトID (required)
     * @param string $object_value オブジェクト検索文字列 (optional)
     * @return Array of \Swagger\Client\Model\_, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function findCountObjectValuesUsingGETWithHttpInfo($object_id, $object_value = null)
    {
        // verify the required parameter 'object_id' is set
        if ($object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $object_id when calling findCountObjectValuesUsingGET');
        }
        // parse inputs
        $resourcePath = "/api/v1/user/objects/{objectId}/findCount";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('*_/_*'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($object_value !== null) {
            $queryParams['objectValue'] = $this->apiClient->getSerializer()->toQueryValue($object_value);
        }
        // path params
        if ($object_id !== null) {
            $resourcePath = str_replace(
                "{" . "objectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($object_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\_',
                '/api/v1/user/objects/{objectId}/findCount'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\_', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation findObjectValuesUsingGET
     *
     * オブジェクトの登録データの検索
     *
     * @param string $object_id オブジェクトID (required)
     * @param string $object_value オブジェクト検索文字列 (optional)
     * @return \Swagger\Client\Model\_
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function findObjectValuesUsingGET($object_id, $object_value = null)
    {
        list($response) = $this->findObjectValuesUsingGETWithHttpInfo($object_id, $object_value);
        return $response;
    }

    /**
     * Operation findObjectValuesUsingGETWithHttpInfo
     *
     * オブジェクトの登録データの検索
     *
     * @param string $object_id オブジェクトID (required)
     * @param string $object_value オブジェクト検索文字列 (optional)
     * @return Array of \Swagger\Client\Model\_, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function findObjectValuesUsingGETWithHttpInfo($object_id, $object_value = null)
    {
        // verify the required parameter 'object_id' is set
        if ($object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $object_id when calling findObjectValuesUsingGET');
        }
        // parse inputs
        $resourcePath = "/api/v1/user/objects/{objectId}/find";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('*_/_*'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($object_value !== null) {
            $queryParams['objectValue'] = $this->apiClient->getSerializer()->toQueryValue($object_value);
        }
        // path params
        if ($object_id !== null) {
            $resourcePath = str_replace(
                "{" . "objectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($object_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\_',
                '/api/v1/user/objects/{objectId}/find'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\_', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getObjectCountUsingGET
     *
     * オブジェクトの登録件数の参照
     *
     * @param string $object_id オブジェクトのキー (required)
     * @return \Swagger\Client\Model\_
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getObjectCountUsingGET($object_id)
    {
        list($response) = $this->getObjectCountUsingGETWithHttpInfo($object_id);
        return $response;
    }

    /**
     * Operation getObjectCountUsingGETWithHttpInfo
     *
     * オブジェクトの登録件数の参照
     *
     * @param string $object_id オブジェクトのキー (required)
     * @return Array of \Swagger\Client\Model\_, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getObjectCountUsingGETWithHttpInfo($object_id)
    {
        // verify the required parameter 'object_id' is set
        if ($object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $object_id when calling getObjectCountUsingGET');
        }
        // parse inputs
        $resourcePath = "/api/v1/user/objects/{objectId}/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('*_/_*'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($object_id !== null) {
            $resourcePath = str_replace(
                "{" . "objectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($object_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\_',
                '/api/v1/user/objects/{objectId}/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\_', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getObjectValueUsingGET
     *
     * オブジェクトの参照
     *
     * @param string $object_id オブジェクトのキー (required)
     * @param int $index オブジェクトのインデックス (required)
     * @return \Swagger\Client\Model\_
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getObjectValueUsingGET($object_id, $index)
    {
        list($response) = $this->getObjectValueUsingGETWithHttpInfo($object_id, $index);
        return $response;
    }

    /**
     * Operation getObjectValueUsingGETWithHttpInfo
     *
     * オブジェクトの参照
     *
     * @param string $object_id オブジェクトのキー (required)
     * @param int $index オブジェクトのインデックス (required)
     * @return Array of \Swagger\Client\Model\_, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getObjectValueUsingGETWithHttpInfo($object_id, $index)
    {
        // verify the required parameter 'object_id' is set
        if ($object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $object_id when calling getObjectValueUsingGET');
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $index when calling getObjectValueUsingGET');
        }
        // parse inputs
        $resourcePath = "/api/v1/user/objects/{objectId}/{index}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('*_/_*'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($object_id !== null) {
            $resourcePath = str_replace(
                "{" . "objectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($object_id),
                $resourcePath
            );
        }
        // path params
        if ($index !== null) {
            $resourcePath = str_replace(
                "{" . "index" . "}",
                $this->apiClient->getSerializer()->toPathValue($index),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\_',
                '/api/v1/user/objects/{objectId}/{index}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\_', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getObjectValuesUsingGET
     *
     * オブジェクトの登録データの参照
     *
     * @param string $object_id オブジェクトのキー (required)
     * @return \Swagger\Client\Model\_
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getObjectValuesUsingGET($object_id)
    {
        list($response) = $this->getObjectValuesUsingGETWithHttpInfo($object_id);
        return $response;
    }

    /**
     * Operation getObjectValuesUsingGETWithHttpInfo
     *
     * オブジェクトの登録データの参照
     *
     * @param string $object_id オブジェクトのキー (required)
     * @return Array of \Swagger\Client\Model\_, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getObjectValuesUsingGETWithHttpInfo($object_id)
    {
        // verify the required parameter 'object_id' is set
        if ($object_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $object_id when calling getObjectValuesUsingGET');
        }
        // parse inputs
        $resourcePath = "/api/v1/user/objects/{objectId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('*_/_*'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($object_id !== null) {
            $resourcePath = str_replace(
                "{" . "objectId" . "}",
                $this->apiClient->getSerializer()->toPathValue($object_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\_',
                '/api/v1/user/objects/{objectId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\_', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation queryAssetsBalanceUsingGET
     *
     * アセットの残高照会
     *
     * @param string $assets_name アセット名 (required)
     * @return \Swagger\Client\Model\_
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function queryAssetsBalanceUsingGET($assets_name)
    {
        list($response) = $this->queryAssetsBalanceUsingGETWithHttpInfo($assets_name);
        return $response;
    }

    /**
     * Operation queryAssetsBalanceUsingGETWithHttpInfo
     *
     * アセットの残高照会
     *
     * @param string $assets_name アセット名 (required)
     * @return Array of \Swagger\Client\Model\_, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function queryAssetsBalanceUsingGETWithHttpInfo($assets_name)
    {
        // verify the required parameter 'assets_name' is set
        if ($assets_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $assets_name when calling queryAssetsBalanceUsingGET');
        }
        // parse inputs
        $resourcePath = "/api/v1/user/assets/{assetsName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('*_/_*'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($assets_name !== null) {
            $resourcePath = str_replace(
                "{" . "assetsName" . "}",
                $this->apiClient->getSerializer()->toPathValue($assets_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\_',
                '/api/v1/user/assets/{assetsName}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\_', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation queryAssetsTradingHistoryUsingGET
     *
     * アセットの取引履歴参照
     *
     * @param string $assets_name アセット名 (required)
     * @param string $eth_address ETHアドレス (optional)
     * @return \Swagger\Client\Model\_
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function queryAssetsTradingHistoryUsingGET($assets_name, $eth_address = null)
    {
        list($response) = $this->queryAssetsTradingHistoryUsingGETWithHttpInfo($assets_name, $eth_address);
        return $response;
    }

    /**
     * Operation queryAssetsTradingHistoryUsingGETWithHttpInfo
     *
     * アセットの取引履歴参照
     *
     * @param string $assets_name アセット名 (required)
     * @param string $eth_address ETHアドレス (optional)
     * @return Array of \Swagger\Client\Model\_, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function queryAssetsTradingHistoryUsingGETWithHttpInfo($assets_name, $eth_address = null)
    {
        // verify the required parameter 'assets_name' is set
        if ($assets_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $assets_name when calling queryAssetsTradingHistoryUsingGET');
        }
        // parse inputs
        $resourcePath = "/api/v1/user/assets/{assetsName}/tradingHistory";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('*_/_*'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($eth_address !== null) {
            $queryParams['ethAddress'] = $this->apiClient->getSerializer()->toQueryValue($eth_address);
        }
        // path params
        if ($assets_name !== null) {
            $resourcePath = str_replace(
                "{" . "assetsName" . "}",
                $this->apiClient->getSerializer()->toPathValue($assets_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\_',
                '/api/v1/user/assets/{assetsName}/tradingHistory'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\_', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation sendAssetsUsingPOST
     *
     * アセットの送信
     *
     * @param string $assets_name アセット名 (required)
     * @param \Swagger\Client\Model\_ $send_assets アセット送信情報 (required)
     * @return \Swagger\Client\Model\API_
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function sendAssetsUsingPOST($assets_name, $send_assets)
    {
        list($response) = $this->sendAssetsUsingPOSTWithHttpInfo($assets_name, $send_assets);
        return $response;
    }

    /**
     * Operation sendAssetsUsingPOSTWithHttpInfo
     *
     * アセットの送信
     *
     * @param string $assets_name アセット名 (required)
     * @param \Swagger\Client\Model\_ $send_assets アセット送信情報 (required)
     * @return Array of \Swagger\Client\Model\API_, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function sendAssetsUsingPOSTWithHttpInfo($assets_name, $send_assets)
    {
        // verify the required parameter 'assets_name' is set
        if ($assets_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $assets_name when calling sendAssetsUsingPOST');
        }
        // verify the required parameter 'send_assets' is set
        if ($send_assets === null) {
            throw new \InvalidArgumentException('Missing the required parameter $send_assets when calling sendAssetsUsingPOST');
        }
        // parse inputs
        $resourcePath = "/api/v1/user/assets/{assetsName}/send";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('*_/_*'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($assets_name !== null) {
            $resourcePath = str_replace(
                "{" . "assetsName" . "}",
                $this->apiClient->getSerializer()->toPathValue($assets_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($send_assets)) {
            $_tempBody = $send_assets;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\API_',
                '/api/v1/user/assets/{assetsName}/send'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\API_', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\API_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
