<?php
/**
 * _
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hackathon Web API
 *
 * Hackathonの Web API 仕様書
 *
 * OpenAPI spec version: 0.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * _ Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class _ implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ユーザー作成結果情報';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'access_key' => 'string',
        'access_password' => 'string',
        'error_message' => 'string',
        'eth_address' => 'string',
        'result' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'access_key' => 'accessKey',
        'access_password' => 'accessPassword',
        'error_message' => 'errorMessage',
        'eth_address' => 'ethAddress',
        'result' => 'result'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'access_key' => 'setAccessKey',
        'access_password' => 'setAccessPassword',
        'error_message' => 'setErrorMessage',
        'eth_address' => 'setEthAddress',
        'result' => 'setResult'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'access_key' => 'getAccessKey',
        'access_password' => 'getAccessPassword',
        'error_message' => 'getErrorMessage',
        'eth_address' => 'getEthAddress',
        'result' => 'getResult'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const RESULT_SUCCESS = 'SUCCESS';
    const RESULT_ERROR = 'ERROR';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getResultAllowableValues()
    {
        return [
            self::RESULT_SUCCESS,
            self::RESULT_ERROR,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_key'] = isset($data['access_key']) ? $data['access_key'] : null;
        $this->container['access_password'] = isset($data['access_password']) ? $data['access_password'] : null;
        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
        $this->container['eth_address'] = isset($data['eth_address']) ? $data['eth_address'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("SUCCESS", "ERROR");
        if (!in_array($this->container['result'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'result', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("SUCCESS", "ERROR");
        if (!in_array($this->container['result'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets access_key
     * @return string
     */
    public function getAccessKey()
    {
        return $this->container['access_key'];
    }

    /**
     * Sets access_key
     * @param string $access_key 作成されたユーザーのAPIアクセスキー
     * @return $this
     */
    public function setAccessKey($access_key)
    {
        $this->container['access_key'] = $access_key;

        return $this;
    }

    /**
     * Gets access_password
     * @return string
     */
    public function getAccessPassword()
    {
        return $this->container['access_password'];
    }

    /**
     * Sets access_password
     * @param string $access_password 作成されたユーザーのAPIアクセスパスワード
     * @return $this
     */
    public function setAccessPassword($access_password)
    {
        $this->container['access_password'] = $access_password;

        return $this;
    }

    /**
     * Gets error_message
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     * @param string $error_message APIの処理結果が「Error」の場合、エラーメッセージが設定されます。
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets eth_address
     * @return string
     */
    public function getEthAddress()
    {
        return $this->container['eth_address'];
    }

    /**
     * Sets eth_address
     * @param string $eth_address 作成されたユーザーのEthereumのアドレス
     * @return $this
     */
    public function setEthAddress($eth_address)
    {
        $this->container['eth_address'] = $eth_address;

        return $this;
    }

    /**
     * Gets result
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     * @param string $result APIの処理結果
     * @return $this
     */
    public function setResult($result)
    {
        $allowed_values = array('SUCCESS', 'ERROR');
        if (!in_array($result, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'result', must be one of 'SUCCESS', 'ERROR'");
        }
        $this->container['result'] = $result;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


